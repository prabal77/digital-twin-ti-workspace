import { TAssetAdministrationShellJSON, AssetAdministrationShell } from './identifiables/AssetAdministrationShell';
import { TSubmodelJSON, Submodel } from './identifiables/Submodel';
import { TConceptDescriptionJSON, ConceptDescription } from './identifiables/ConceptDescription';
import { TAssetJSON, Asset } from './identifiables/Asset';
import { IReference, Reference } from './baseClasses/Reference';
import { Referable } from './characteristics/Referable';
declare type TAssetAdministrationShellEnvJSON = {
    assetAdministrationShells: Array<TAssetAdministrationShellJSON>;
    submodels: Array<TSubmodelJSON>;
    conceptDescriptions: Array<TConceptDescriptionJSON>;
    assets: Array<TAssetJSON>;
};
interface IAssetAdministrationShellEnv {
    assetAdministrationShells: Array<AssetAdministrationShell>;
    submodels: Array<Submodel>;
    conceptDescriptions: Array<ConceptDescription>;
    assets: Array<Asset>;
}
declare class AssetAdministrationShellEnv implements IAssetAdministrationShellEnv {
    assetAdministrationShells: Array<AssetAdministrationShell>;
    submodels: Array<Submodel>;
    conceptDescriptions: Array<ConceptDescription>;
    assets: Array<Asset>;
    static fromJSON(obj: TAssetAdministrationShellEnvJSON): AssetAdministrationShellEnv;
    constructor(assetAdministrationShells?: Array<AssetAdministrationShell>, submodels?: Array<Submodel>, assets?: Array<Asset>, conceptDescriptions?: Array<ConceptDescription>);
    setAssetAdministrationShells(assetAdministrationShellsIn: Array<TAssetAdministrationShellJSON>): this;
    getAssetAdministrationShells(): Array<AssetAdministrationShell>;
    addAssetAdministrationShell(assetAdministrationShell: AssetAdministrationShell): this;
    getSubmodels(): Submodel[];
    setSubmodels(submodels: Array<TSubmodelJSON>): this;
    addSubmodel(submodel: Submodel): this;
    getConceptDescriptions(): ConceptDescription[];
    setConceptDescriptions(conceptDescriptions: Array<TConceptDescriptionJSON>): this;
    addConceptDescription(conceptDescription: ConceptDescription): this;
    getAssets(): Asset[];
    setAssets(assets: Array<TAssetJSON>): void;
    addAsset(asset: Asset): this;
    getInstance(ref: IReference): Referable;
    private getStructureAggregationName;
    getShortestRef(ref: IReference): IReference;
    getSubmodelsByIdShort(idShort: string): Array<Submodel>;
    getSubmodelsBySemanticId(ref: Reference): Array<Submodel>;
    getConceptDescriptionsByIdShort(idShort: string): Array<ConceptDescription>;
    getAssetsByIdShort(idShort: string): Array<Asset>;
    toJSON(): {
        assetAdministrationShells: AssetAdministrationShell[];
        submodels: Submodel[];
        conceptDescriptions: ConceptDescription[];
        assets: Asset[];
    };
}
export { AssetAdministrationShellEnv, TAssetAdministrationShellEnvJSON, IAssetAdministrationShellEnv };
