"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmodelElementCollection = void 0;
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const SubmodelElementFactory_1 = require("./SubmodelElementFactory");
const SubmodelElement_1 = require("./SubmodelElement");
class SubmodelElementCollection extends SubmodelElement_1.SubmodelElement {
    constructor(idShort, value, ordered, allowDuplicates, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent) {
        super(idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.SubmodelElementCollection }, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent);
        this.value = [];
        this.ordered = false;
        this.allowDuplicates = true;
        if (value)
            this.setValue(value);
        if (ordered)
            this.ordered = ordered;
        if (allowDuplicates)
            this.allowDuplicates = allowDuplicates;
    }
    static fromJSON(obj) {
        return new SubmodelElementCollection(obj.idShort, obj.value, obj.ordered, obj.allowDuplicates, obj.semanticId, obj.kind, obj.embeddedDataSpecifications, obj.qualifiers, obj.description, obj.category, obj.parent);
    }
    getValue() {
        return this.value;
    }
    setValue(values) {
        this.value = [];
        var that = this;
        values.forEach(function (value) {
            that.addValue(value);
        });
        return this;
    }
    /*public addValue(value: SubmodelElement) {
    if (this.value.indexOf(value) >= 0 && this.allowDuplicates == false) {
      throw new Error('You can not add an object multiple times with allowDuplicates == false');
    }
    value.parent = this.getReference();
    this.value.push(value);
  }
*/
    addValue(submodelElement) {
        submodelElement.parent = this.getReference();
        this.value.push(SubmodelElementFactory_1.SubmodelElementFactory.createSubmodelElement(submodelElement));
        return this;
    }
    getValueByIdShort(idShort) {
        let res = this.value.find((submodelElement) => {
            if (submodelElement.idShort == idShort) {
                return true;
            }
            else {
                return false;
            }
        });
        if (res) {
            return res;
        }
        else {
            throw new Error('SubmodelElement with idShort ' + idShort + ' not found');
        }
    }
    toJSON() {
        return {
            idShort: this.idShort,
            parent: this.parent,
            category: this.category,
            description: this.description,
            kind: this.kind,
            modelType: this.modelType,
            semanticId: this.semanticId,
            embeddedDataSpecifications: this.embeddedDataSpecifications,
            value: this.value,
            ordered: this.ordered,
            allowDuplicates: this.allowDuplicates,
        };
    }
}
exports.SubmodelElementCollection = SubmodelElementCollection;
//# sourceMappingURL=SubmodelElementCollection.js.map