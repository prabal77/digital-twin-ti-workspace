import { IModelType } from '../baseClasses/ModelType';
import { IReference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { ILangString } from '../baseClasses/LangString';
import { Referable, IReferable } from '../characteristics/Referable';
import { IHasSemantics } from '../characteristics/HasSemantics';
import { IHasDataSpecification } from '../characteristics/HasDataSpecification';
interface IView extends IReferable, IHasSemantics {
    containedElements?: Array<IReference>;
}
declare type TViewJSON = {
    modelType?: IModelType;
    semanticId?: IReference;
    embeddedDataSpecifications?: IEmbeddedDataSpecification[];
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    containedElements?: Array<IReference>;
};
declare class View extends Referable implements IHasSemantics, IHasDataSpecification, IView {
    semanticId?: IReference;
    embeddedDataSpecifications: IEmbeddedDataSpecification[];
    containedElements: Array<IReference>;
    constructor(idShort: string, containedElements?: Array<IReference>, semanticId?: IReference, description?: Array<ILangString>, category?: string, parent?: IReference);
    setContainedElements(ces: Array<IReference>): this;
    setSemanticId(semanticId: IReference): this;
    toJSON(): IView;
}
export { View, IView, TViewJSON };
