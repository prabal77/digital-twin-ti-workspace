"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blob = void 0;
const SubmodelElement_1 = require("./SubmodelElement");
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const fs = __importStar(require("fs"));
class Blob extends SubmodelElement_1.SubmodelElement {
    constructor(idShort, mimeType, value, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent) {
        super(idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.Blob }, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent);
        this.mimeType = mimeType || 'application/octet-stream';
        if (value)
            this.value = value;
    }
    static fromJSON(obj) {
        return new Blob(obj.idShort, obj.mimeType, obj.value, obj.semanticId, obj.kind, obj.embeddedDataSpecifications, obj.qualifiers, obj.description, obj.category, obj.parent);
    }
    setValue(path) {
        this.value = this.base64Encode(path);
    }
    saveFile(path) {
        this.base64Decode(this.value + '', path);
    }
    base64Encode(path) {
        var bitmap = fs.readFileSync(path);
        return new Buffer(bitmap).toString('base64');
    }
    base64Decode(base64str, path) {
        var bitmap = new Buffer(base64str, 'base64');
        fs.writeFileSync(path, bitmap);
    }
    checkRules() {
        if (!this.mimeType) {
            throw new Error('Attribute MimeType is required for a Blob.');
        }
    }
    toJSON() {
        let res = super.toJSON();
        res.value = this.value;
        res.mimeType = this.mimeType;
        return res;
    }
}
exports.Blob = Blob;
//# sourceMappingURL=Blob.js.map