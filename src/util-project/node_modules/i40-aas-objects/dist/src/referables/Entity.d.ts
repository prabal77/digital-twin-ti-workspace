import { KindEnum } from '../types/KindEnum';
import { IReference, Reference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
import { EntityTypeEnum } from '../types/EntityTypeEnum';
import { TSubmodelElements } from '../types/SubmodelElementTypes';
import { IConstraint } from '../baseClasses/Constraint';
interface IEntity extends ISubmodelElement {
    statements?: Array<TSubmodelElements>;
    entityType: EntityTypeEnum;
    asset?: Reference;
}
declare type TEntityJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    statements?: Array<TSubmodelElements>;
    entityType: EntityTypeEnum;
    asset?: IReference;
    qualifiers?: Array<IConstraint>;
};
declare class Entity extends SubmodelElement implements IEntity {
    static fromJSON(obj: TEntityJSON): Entity;
    statements?: Array<TSubmodelElements>;
    entityType: EntityTypeEnum;
    asset?: Reference;
    constructor(idShort: string, entityType: EntityTypeEnum, statements?: Array<TSubmodelElements>, asset?: IReference, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    setStatements(statements: Array<TSubmodelElements>): this;
    addStatement(statement: TSubmodelElements): this;
    toJSON(): TEntityJSON;
}
export { Entity, IEntity, TEntityJSON };
