"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const Reference_1 = require("../baseClasses/Reference");
const SubmodelElement_1 = require("./SubmodelElement");
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const EntityTypeEnum_1 = require("../types/EntityTypeEnum");
const SubmodelElementFactory_1 = require("./SubmodelElementFactory");
class Entity extends SubmodelElement_1.SubmodelElement {
    constructor(idShort, entityType, statements, asset, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent) {
        super(idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.Entity }, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent);
        this.statements = [];
        this.entityType = entityType;
        if (statements)
            this.setStatements(statements);
        if (this.entityType == EntityTypeEnum_1.EntityTypeEnum.SelfManaged) {
            if (asset) {
                this.asset = new Reference_1.Reference(asset);
            }
            else {
                throw new Error('Constraint AASd-014: The asset attribute must be set if entityType is set to <<SelfManagedEntity>>. It is empty otherwise.');
            }
        }
    }
    static fromJSON(obj) {
        return new Entity(obj.idShort, obj.entityType, obj.statements, obj.asset, obj.semanticId, obj.kind, obj.embeddedDataSpecifications, obj.qualifiers, obj.description, obj.category, obj.parent);
    }
    setStatements(statements) {
        this.statements = [];
        var that = this;
        statements.forEach(function (statement) {
            that.addStatement(statement);
        });
        return this;
    }
    addStatement(statement) {
        if (!this.statements) {
            this.statements = [];
        }
        statement.parent = this.getReference();
        this.statements.push(SubmodelElementFactory_1.SubmodelElementFactory.createSubmodelElement(statement));
        return this;
    }
    toJSON() {
        let res = super.toJSON();
        res.statements = this.statements;
        res.entityType = this.entityType;
        res.asset = this.asset;
        return res;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Entity.js.map