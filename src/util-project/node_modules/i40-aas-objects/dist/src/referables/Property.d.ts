import { KindEnum } from '../types/KindEnum';
import { IReference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { AnyAtomicTypeEnum } from '../types/AnyAtomicTypeEnum';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
import { IConstraint } from '../baseClasses/Constraint';
interface IProperty extends ISubmodelElement {
    valueId?: IReference;
    value?: string;
    valueType: AnyAtomicTypeEnum;
}
declare type TPropertyJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    valueId?: IReference;
    value?: string;
    valueType: AnyAtomicTypeEnum;
    qualifiers?: Array<IConstraint>;
};
declare class Property extends SubmodelElement implements IProperty {
    valueId?: IReference;
    value?: string;
    valueType: AnyAtomicTypeEnum;
    static fromJSON(obj: TPropertyJSON): Property;
    constructor(idShort: string, valueType: AnyAtomicTypeEnum, value?: string, valueId?: IReference, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    toJSON(): TPropertyJSON;
}
export { Property, IProperty, TPropertyJSON };
