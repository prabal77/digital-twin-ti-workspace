"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotatedRelationshipElement = void 0;
const Reference_1 = require("../baseClasses/Reference");
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const SubmodelElement_1 = require("./SubmodelElement");
const SubmodelElementFactory_1 = require("./SubmodelElementFactory");
class AnnotatedRelationshipElement extends SubmodelElement_1.SubmodelElement {
    constructor(idShort, first, second, annotation, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent) {
        super(idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.AnnotatedRelationshipElement }, semanticId, kind, embeddedDataSpecifications, qualifiers, description, category, parent);
        this.annotation = [];
        this.modelType = { name: ModelTypeElementsEnum_1.KeyElementsEnum.AnnotatedRelationshipElement };
        this.first = new Reference_1.Reference(first);
        this.second = new Reference_1.Reference(second);
        let _annotation = [];
        annotation.forEach((dataElementJSON) => {
            console.log(dataElementJSON);
            _annotation.push(SubmodelElementFactory_1.SubmodelElementFactory.createDataElement(dataElementJSON));
        });
        this.setAnnotation(_annotation);
    }
    static fromJSON(obj) {
        return new AnnotatedRelationshipElement(obj.idShort, obj.first, obj.second, obj.annotation, obj.semanticId, obj.kind, obj.embeddedDataSpecifications, obj.qualifiers, obj.description, obj.category, obj.parent);
    }
    setAnnotation(annotation) {
        this.annotation = [];
        var that = this;
        annotation.forEach(function (dataElement) {
            that.addAnnotation(dataElement);
        });
        return this;
    }
    addAnnotation(annotation) {
        annotation.parent = this.getReference();
        this.annotation.push(annotation);
        return this;
    }
    getAnnotationByIdShort(idShort) {
        let res = this.annotation.find((dataElement) => {
            if (dataElement.idShort == idShort) {
                return true;
            }
            else {
                return false;
            }
        });
        if (res) {
            return res;
        }
        else {
            throw new Error('DataElement with idShort ' + idShort + ' not found');
        }
    }
    toJSON() {
        let res = super.toJSON();
        res.annotation = this.annotation;
        return res;
    }
}
exports.AnnotatedRelationshipElement = AnnotatedRelationshipElement;
//# sourceMappingURL=AnnotatedRelationshipElement.js.map