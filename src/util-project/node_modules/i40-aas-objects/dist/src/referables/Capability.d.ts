import { KindEnum } from '../types/KindEnum';
import { IReference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { IConstraint } from '../baseClasses/Constraint';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
interface ICapability extends ISubmodelElement {
}
declare type TCapabilityJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    qualifiers?: Array<IConstraint>;
};
declare class Capability extends SubmodelElement implements ICapability {
    static fromJSON(obj: TCapabilityJSON): Capability;
    constructor(idShort: string, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    toJSON(): TCapabilityJSON;
}
export { Capability, TCapabilityJSON, ICapability };
