import { KindEnum } from '../types/KindEnum';
import { IReference, Reference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
import { IConstraint } from '../baseClasses/Constraint';
interface IRelationShipElement extends ISubmodelElement {
    first: Reference;
    second: Reference;
}
declare type TRelationShipElementJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    first: IReference;
    second: IReference;
    qualifiers?: Array<IConstraint>;
};
declare class RelationShipElement extends SubmodelElement implements IRelationShipElement {
    first: Reference;
    second: Reference;
    static fromJSON(obj: TRelationShipElementJSON): RelationShipElement;
    constructor(idShort: string, first: IReference, second: IReference, modelType?: IModelType, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    toJSON(): TRelationShipElementJSON;
}
export { RelationShipElement, IRelationShipElement, TRelationShipElementJSON };
