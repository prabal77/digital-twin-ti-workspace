import { KindEnum } from '../types/KindEnum';
import { IReference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { IConstraint } from '../baseClasses/Constraint';
import { OperationVariable } from './OperationVariable';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
interface IOperation extends ISubmodelElement {
    inputVariable?: Array<OperationVariable>;
    outputVariable?: Array<OperationVariable>;
    inoutputVariable?: Array<OperationVariable>;
    invoke(_in?: OperationVariable, _inout?: OperationVariable, obj?: any): any;
}
declare type TOperationJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    qualifiers?: Array<IConstraint>;
    inputVariable?: Array<OperationVariable>;
    outputVariable?: Array<OperationVariable>;
    inoutputVariable?: Array<OperationVariable>;
};
declare class Operation extends SubmodelElement implements IOperation {
    inputVariable?: Array<OperationVariable>;
    outputVariable?: Array<OperationVariable>;
    inoutputVariable?: Array<OperationVariable>;
    static fromJSON(obj: TOperationJSON): Operation;
    constructor(idShort: string, inputVariable?: Array<OperationVariable>, outputVariable?: Array<OperationVariable>, inoutputVariable?: Array<OperationVariable>, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    invoke(_in?: OperationVariable | undefined, _inout?: OperationVariable | undefined, obj?: any): void;
    toJSON(): TOperationJSON;
}
export { Operation, TOperationJSON, IOperation };
