"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmodelElementFactory = void 0;
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const Property_1 = require("./Property");
const SubmodelElementCollection_1 = require("./SubmodelElementCollection");
const MultiLanguageProperty_1 = require("./MultiLanguageProperty");
const Operation_1 = require("./Operation");
const Entity_1 = require("./Entity");
const RelationshipElement_1 = require("./RelationshipElement");
const AnnotatedRelationshipElement_1 = require("./AnnotatedRelationshipElement");
const Range_1 = require("./Range");
const Blob_1 = require("./Blob");
const File_1 = require("./File");
const ReferenceElement_1 = require("./ReferenceElement");
const Capability_1 = require("./Capability");
const BasicEvent_1 = require("./BasicEvent");
class SubmodelElementFactory {
    static createDataElement(submodelElement) {
        if (submodelElement.modelType != null) {
            switch (submodelElement.modelType.name) {
                case ModelTypeElementsEnum_1.KeyElementsEnum.Property:
                    return Property_1.Property.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.MultiLanguageProperty:
                    return MultiLanguageProperty_1.MultiLanguageProperty.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Range:
                    return Range_1.Range.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Blob:
                    return Blob_1.Blob.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.File:
                    return File_1.File.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.ReferenceElement:
                    return ReferenceElement_1.ReferenceElement.fromJSON(submodelElement);
                default:
                    throw new Error('Could not parse SubmodeElement. ModelType: ' +
                        submodelElement.modelType.name +
                        ' is not a supported DataElement');
            }
        }
        else {
            throw new Error(`Modeltype property of element with shortid: ${submodelElement.idShort} is null or undefined `);
        }
    }
    static createSubmodelElement(submodelElement) {
        if (submodelElement.modelType != null) {
            switch (submodelElement.modelType.name) {
                case ModelTypeElementsEnum_1.KeyElementsEnum.Property:
                    return Property_1.Property.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.SubmodelElementCollection:
                    return SubmodelElementCollection_1.SubmodelElementCollection.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.MultiLanguageProperty:
                    return MultiLanguageProperty_1.MultiLanguageProperty.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Operation:
                    return Operation_1.Operation.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Entity:
                    return Entity_1.Entity.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.RelationshipElement:
                    return RelationshipElement_1.RelationShipElement.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.AnnotatedRelationshipElement:
                    console.log(submodelElement);
                    return AnnotatedRelationshipElement_1.AnnotatedRelationshipElement.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Range:
                    return Range_1.Range.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Blob:
                    return Blob_1.Blob.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.File:
                    return File_1.File.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.ReferenceElement:
                    return ReferenceElement_1.ReferenceElement.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.Capability:
                    return Capability_1.Capability.fromJSON(submodelElement);
                case ModelTypeElementsEnum_1.KeyElementsEnum.BasicEvent:
                    return BasicEvent_1.BasicEvent.fromJSON(submodelElement);
                default:
                    throw new Error('Could not parse SubmodeElement. ModelType: ' +
                        submodelElement.modelType.name +
                        ' is not a supported SubmodelElement');
            }
        }
        else {
            throw new Error(`Modeltype property of element with shortid: ${submodelElement.idShort} is null or undefined `);
        }
    }
}
exports.SubmodelElementFactory = SubmodelElementFactory;
//# sourceMappingURL=SubmodelElementFactory.js.map