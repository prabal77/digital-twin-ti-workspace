import { KindEnum } from '../types/KindEnum';
import { IReference, Reference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { ILangString } from '../baseClasses/LangString';
import { IRelationShipElement, TRelationShipElementJSON } from './RelationshipElement';
import { IConstraint } from '../baseClasses/Constraint';
import { SubmodelElement } from './SubmodelElement';
import { TDataElemets, TDataElemetsJSON } from '../types/DataElementType';
interface IAnnotatedRelationshipElement extends IRelationShipElement {
    first: Reference;
    second: Reference;
    annotation: Array<TDataElemets>;
}
declare type TAnnotatedRelationshipElementJSON = TRelationShipElementJSON & {
    annotation: Array<TDataElemetsJSON>;
};
declare class AnnotatedRelationshipElement extends SubmodelElement implements IAnnotatedRelationshipElement, IRelationShipElement {
    annotation: Array<TDataElemets>;
    static fromJSON(obj: TAnnotatedRelationshipElementJSON): AnnotatedRelationshipElement;
    constructor(idShort: string, first: IReference, second: IReference, annotation: Array<TDataElemetsJSON>, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    first: Reference;
    second: Reference;
    embeddedDataSpecifications?: IEmbeddedDataSpecification[] | undefined;
    modelType: import('../baseClasses/ModelType').IModelType;
    parent?: Reference | undefined;
    category?: string | undefined;
    qualifiers?: IConstraint[] | undefined;
    setAnnotation(annotation: Array<TDataElemets>): this;
    addAnnotation(annotation: TDataElemets): this;
    getAnnotationByIdShort(idShort: string): TDataElemets;
    toJSON(): TAnnotatedRelationshipElementJSON;
}
export { AnnotatedRelationshipElement, IAnnotatedRelationshipElement, TAnnotatedRelationshipElementJSON };
