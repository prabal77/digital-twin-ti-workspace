import { KindEnum } from '../types/KindEnum';
import { IReference } from '../baseClasses/Reference';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { ILangString } from '../baseClasses/LangString';
import { SubmodelElement, ISubmodelElement } from './SubmodelElement';
import { IConstraint } from '../baseClasses/Constraint';
interface IBlob extends ISubmodelElement {
    value?: string;
    mimeType: string;
}
declare type TBlobJSON = {
    kind?: KindEnum;
    semanticId: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    value?: string;
    mimeType: string;
    qualifiers?: Array<IConstraint>;
};
declare class Blob extends SubmodelElement implements IBlob {
    value?: string;
    mimeType: string;
    static fromJSON(obj: TBlobJSON): Blob;
    constructor(idShort: string, mimeType: string, value?: string, semanticId?: IReference, kind?: KindEnum, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, qualifiers?: Array<IConstraint>, description?: Array<ILangString>, category?: string, parent?: IReference);
    setValue(path: string): void;
    saveFile(path: string): void;
    base64Encode(path: string): string;
    base64Decode(base64str: string, path: string): void;
    checkRules(): void;
    toJSON(): TBlobJSON;
}
export { Blob, IBlob, TBlobJSON };
