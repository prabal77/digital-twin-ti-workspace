"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetAdministrationShellEnv = void 0;
const AssetAdministrationShell_1 = require("./identifiables/AssetAdministrationShell");
const Submodel_1 = require("./identifiables/Submodel");
const ConceptDescription_1 = require("./identifiables/ConceptDescription");
const Asset_1 = require("./identifiables/Asset");
const Reference_1 = require("./baseClasses/Reference");
class AssetAdministrationShellEnv {
    constructor(assetAdministrationShells, submodels, assets, conceptDescriptions) {
        this.assetAdministrationShells = [];
        this.submodels = [];
        this.conceptDescriptions = [];
        this.assets = [];
        this.assetAdministrationShells = assetAdministrationShells || [];
        this.submodels = submodels || [];
        this.assets = assets || [];
        this.conceptDescriptions = conceptDescriptions || [];
    }
    static fromJSON(obj) {
        var aasEnv = new AssetAdministrationShellEnv();
        aasEnv.setAssetAdministrationShells(obj.assetAdministrationShells);
        aasEnv.setSubmodels(obj.submodels);
        aasEnv.setAssets(obj.assets);
        aasEnv.setConceptDescriptions(obj.conceptDescriptions);
        return aasEnv;
    }
    setAssetAdministrationShells(assetAdministrationShellsIn) {
        this.assetAdministrationShells = [];
        var that = this;
        assetAdministrationShellsIn.forEach(assetAdministrationShell => {
            that.addAssetAdministrationShell(AssetAdministrationShell_1.AssetAdministrationShell.fromJSON(assetAdministrationShell));
        });
        return this;
    }
    getAssetAdministrationShells() {
        return this.assetAdministrationShells;
    }
    addAssetAdministrationShell(assetAdministrationShell) {
        this.assetAdministrationShells.push(assetAdministrationShell);
        return this;
    }
    getSubmodels() {
        return this.submodels;
    }
    setSubmodels(submodels) {
        this.submodels = [];
        var that = this;
        submodels.forEach(submodel => {
            that.addSubmodel(Submodel_1.Submodel.fromJSON(submodel));
        });
        return this;
    }
    addSubmodel(submodel) {
        this.submodels.push(submodel);
        return this;
    }
    getConceptDescriptions() {
        return this.conceptDescriptions;
    }
    setConceptDescriptions(conceptDescriptions) {
        this.conceptDescriptions = [];
        var that = this;
        conceptDescriptions.forEach(conceptDescription => {
            that.addConceptDescription(ConceptDescription_1.ConceptDescription.fromJSON(conceptDescription));
        });
        return this;
    }
    addConceptDescription(conceptDescription) {
        this.conceptDescriptions.push(conceptDescription);
        return this;
    }
    getAssets() {
        return this.assets;
    }
    setAssets(assets) {
        this.assets = [];
        var that = this;
        assets.forEach(asset => {
            that.addAsset(Asset_1.Asset.fromJSON(asset));
        });
    }
    addAsset(asset) {
        this.assets.push(asset);
        return this;
    }
    getInstance(ref) {
        var keyChain = this.getShortestRef(ref);
        var structure = this;
        var that = this;
        keyChain.keys.forEach(key => {
            var aggregationName = that.getStructureAggregationName(key, structure.modelType);
            structure[aggregationName].some((aggregationElement) => {
                if (structure.modelType && structure.modelType.name) {
                    if (aggregationElement.idShort == key.value) {
                        structure = aggregationElement;
                        return true;
                    }
                }
                else {
                    if (aggregationElement.identification.id == key.value) {
                        structure = aggregationElement;
                        return true;
                    }
                }
            });
        });
        return structure;
    }
    getStructureAggregationName(key, structureModelType) {
        var structureModelTypeName = 'AssetAdministrationShellEnv';
        if (structureModelType) {
            structureModelTypeName = structureModelType.name;
        }
        switch (key.type) {
            case 'AssetAdministrationShell':
                return 'assetAdministrationShells';
                break;
            case 'Submodel':
                return 'submodels';
            case 'ConceptDescription':
                return 'conceptDescriptions';
            case 'Property':
                if (structureModelTypeName == 'SubmodelElementCollection') {
                    return 'value';
                }
                else {
                    return 'submodelElements';
                }
            default:
                throw new Error('Can nit find key type ' + key.type);
        }
    }
    getShortestRef(ref) {
        var keys = ref.keys;
        if (keys.length <= 1) {
            return ref;
        }
        var newKeys = [];
        for (var j = keys.length - 1; j >= 0; --j) {
            newKeys.push(keys[j]);
            if (keys[j].idType != 'IdShort') {
                break;
            }
        }
        return new Reference_1.Reference({ keys: newKeys });
    }
    getSubmodelsByIdShort(idShort) {
        let res = [];
        this.submodels.forEach((submodel) => {
            if (submodel.idShort == idShort) {
                res.push(submodel);
            }
        });
        return res;
    }
    getSubmodelsBySemanticId(ref) {
        let res = [];
        this.submodels.forEach((submodel) => {
            if (submodel.semanticId &&
                submodel.semanticId.keys &&
                submodel.semanticId.keys[0] &&
                submodel.semanticId.keys[0].value == ref.keys[0].value) {
                res.push(submodel);
            }
        });
        return res;
    }
    getConceptDescriptionsByIdShort(idShort) {
        let res = [];
        this.conceptDescriptions.forEach((conceptDescription) => {
            if (conceptDescription.idShort == idShort) {
                res.push(conceptDescription);
            }
        });
        return res;
    }
    getAssetsByIdShort(idShort) {
        let res = [];
        this.assets.forEach((asset) => {
            if (asset.idShort == idShort) {
                res.push(asset);
            }
        });
        return res;
    }
    toJSON() {
        return {
            assetAdministrationShells: this.assetAdministrationShells,
            submodels: this.submodels,
            conceptDescriptions: this.conceptDescriptions,
            assets: this.assets,
        };
    }
}
exports.AssetAdministrationShellEnv = AssetAdministrationShellEnv;
//# sourceMappingURL=AssetAdministrationShellEnv.js.map