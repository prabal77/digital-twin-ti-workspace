import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IModelType } from '../baseClasses/ModelType';
import { IReference, Reference } from '../baseClasses/Reference';
import { ILangString } from '../baseClasses/LangString';
import { IIdentifier } from '../baseClasses/Identifier';
import { IAdministrativeInformation } from '../baseClasses/AdministrativeInformation';
import { Identifiable } from '../characteristics/Identifiable';
interface IConceptDescription {
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType: IModelType;
    idShort: string;
    parent?: Reference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    isCaseOf?: Array<IReference>;
}
interface TConceptDescriptionJSON {
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    isCaseOf?: Array<IReference>;
}
declare class ConceptDescription extends Identifiable implements IConceptDescription {
    static fromJSON(obj: TConceptDescriptionJSON): ConceptDescription;
    isCaseOf?: Array<IReference>;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    constructor(identification: IIdentifier, idShort: string, administration?: IAdministrativeInformation, isCaseOf?: Array<IReference>, description?: Array<ILangString>, category?: string, parent?: Reference, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>);
    setIsCaseOf(isCaseOf: Array<IReference>): this;
    addIsCaseOf(isCaseOfinstance: IReference): this;
    toJSON(): IConceptDescription;
}
export { ConceptDescription, TConceptDescriptionJSON, IConceptDescription };
