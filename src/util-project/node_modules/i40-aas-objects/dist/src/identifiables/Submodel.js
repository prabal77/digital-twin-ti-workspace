"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Submodel = void 0;
const Reference_1 = require("../baseClasses/Reference");
const KindEnum_1 = require("../types/KindEnum");
const Identifiable_1 = require("../characteristics/Identifiable");
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
const SubmodelElementFactory_1 = require("../referables/SubmodelElementFactory");
class Submodel extends Identifiable_1.Identifiable {
    constructor(identification, idShort, administration, submodelsElements, qualifiers, semanticId, description, category, parent, embeddedDataSpecifications, kind) {
        super(identification, idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.Submodel }, administration, description, category, parent);
        this.kind = KindEnum_1.KindEnum.Instance;
        this.submodelElements = [];
        this.setSubmodelElements(submodelsElements || []);
        this.qualifiers = qualifiers;
        this.embeddedDataSpecifications = embeddedDataSpecifications || [];
        this.kind = kind || KindEnum_1.KindEnum.Instance;
        if (semanticId)
            this.semanticId = new Reference_1.Reference(semanticId);
    }
    static fromJSON(obj) {
        var submodelElements = [];
        if (obj.submodelElements) {
            obj.submodelElements.forEach(function (sme) {
                submodelElements.push(SubmodelElementFactory_1.SubmodelElementFactory.createSubmodelElement(sme));
            });
        }
        var sm = new Submodel(obj.identification, obj.idShort, obj.administration, submodelElements, obj.qualifiers ? obj.qualifiers : undefined, obj.semanticId, obj.description, obj.category, obj.parent ? new Reference_1.Reference(obj.parent) : undefined, obj.embeddedDataSpecifications, obj.kind);
        return sm;
    }
    getSubmodelElements() {
        return this.submodelElements;
    }
    setSemanticId(semanticId) {
        this.semanticId = new Reference_1.Reference(semanticId);
        return this;
    }
    getSubmodelIdShort() {
        return this.idShort;
    }
    setSubmodelElements(submodelElements) {
        var that = this;
        this.submodelElements = [];
        submodelElements.forEach(function (submodelElement) {
            that.addSubmodelElement(submodelElement);
        });
        return this;
    }
    addSubmodelElement(submodelElement) {
        submodelElement.parent = this.getReference();
        this.submodelElements.push(SubmodelElementFactory_1.SubmodelElementFactory.createSubmodelElement(submodelElement));
        return this;
    }
    getSubmodelElementByIdShort(idShort) {
        let res = this.submodelElements.find((submodelElement) => {
            if (submodelElement.idShort == idShort) {
                return true;
            }
            else {
                return false;
            }
        });
        if (res) {
            return res;
        }
        else {
            throw new Error('SubmodelElement with idShort ' + idShort + ' not found');
        }
    }
    toJSON() {
        let res = super.toJSON();
        res.kind = this.kind;
        res.semanticId = this.semanticId;
        res.submodelElements = this.submodelElements;
        res.embeddedDataSpecifications = this.embeddedDataSpecifications;
        return res;
    }
}
exports.Submodel = Submodel;
//# sourceMappingURL=Submodel.js.map