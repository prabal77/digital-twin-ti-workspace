import { IModelType } from '../baseClasses/ModelType';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { IReference, Reference } from '../baseClasses/Reference';
import { ILangString } from '../baseClasses/LangString';
import { IIdentifier } from '../baseClasses/Identifier';
import { IAdministrativeInformation } from '../baseClasses/AdministrativeInformation';
import { ConceptDictionary, IConceptDictionary } from '../referables/ConceptDictionary';
import { View, IView } from '../referables/View';
import { Identifiable } from '../characteristics/Identifiable';
interface IAssetAdministrationShell {
    modelType: IModelType;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    idShort: string;
    parent?: Reference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    derivedFrom?: Reference;
    security?: any;
    submodels?: Array<Reference>;
    conceptDictionaries?: Array<ConceptDictionary>;
    views?: Array<View>;
    asset: Reference;
}
interface TAssetAdministrationShellJSON {
    modelType?: IModelType;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    derivedFrom?: IReference;
    security?: any;
    submodels?: Array<IReference>;
    conceptDictionaries?: Array<IConceptDictionary>;
    views?: Array<View>;
    asset?: IReference;
}
declare class AssetAdministrationShell extends Identifiable implements IAssetAdministrationShell {
    derivedFrom?: Reference;
    security?: any;
    submodels: Array<Reference>;
    conceptDictionaries?: Array<ConceptDictionary>;
    views?: Array<View>;
    asset: Reference;
    embeddedDataSpecifications: Array<IEmbeddedDataSpecification>;
    static fromJSON(obj: TAssetAdministrationShellJSON): AssetAdministrationShell;
    constructor(identification: IIdentifier, idShort: string, administration?: IAdministrativeInformation, asset?: Reference, submodels?: Array<Reference>, conceptDictionaries?: Array<ConceptDictionary>, views?: Array<View>, derivedFrom?: Reference, description?: Array<ILangString>, category?: string, security?: any, parent?: Reference, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>);
    setSubmodels(submodels: Array<IReference>): this;
    addSubmodel(submodel: IReference): this;
    setAsset(asset: IReference): this;
    setConceptDictionaries(conceptDictionaries: Array<IConceptDictionary>): this;
    addConceptDictionary(conceptDictionary: IConceptDictionary): this;
    setViews(views: Array<IView>): this;
    addView(view: IView): this;
    toJSON(): IAssetAdministrationShell;
    checkRules(): void;
}
export { AssetAdministrationShell, TAssetAdministrationShellJSON, IAssetAdministrationShell };
