import { IConstraint } from '../baseClasses/Constraint';
import { IModelType } from '../baseClasses/ModelType';
import { IReference, Reference } from '../baseClasses/Reference';
import { ILangString } from '../baseClasses/LangString';
import { IIdentifier } from '../baseClasses/Identifier';
import { IAdministrativeInformation } from '../baseClasses/AdministrativeInformation';
import { KindEnum } from '../types/KindEnum';
import { IEmbeddedDataSpecification } from '../baseClasses/EmbeddedDataSpecification';
import { Identifiable } from '../characteristics/Identifiable';
import { IHasKind } from '../characteristics/HasKind';
import { IHasSemantics } from '../characteristics/HasSemantics';
import { IQualifiable } from '../characteristics/Qualifiable';
import { TSubmodelElements } from '../types/SubmodelElementTypes';
interface ISubmodel {
    qualifiers?: Array<IConstraint>;
    modelType: IModelType;
    idShort: string;
    parent?: Reference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    kind: KindEnum;
    semanticId?: Reference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    submodelElements?: Array<TSubmodelElements>;
}
interface TSubmodelJSON {
    qualifiers?: Array<IConstraint>;
    modelType?: IModelType;
    idShort: string;
    parent?: IReference;
    category?: string;
    description?: Array<ILangString>;
    identification: IIdentifier;
    administration?: IAdministrativeInformation;
    kind?: KindEnum;
    semanticId?: IReference;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    submodelElements?: Array<TSubmodelElements>;
}
declare class Submodel extends Identifiable implements ISubmodel, IHasKind, IHasSemantics, IQualifiable {
    static fromJSON(obj: TSubmodelJSON): Submodel;
    qualifiers?: Array<IConstraint>;
    kind: KindEnum;
    semanticId?: Reference;
    submodelElements: Array<TSubmodelElements>;
    embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>;
    constructor(identification: IIdentifier, idShort: string, administration?: IAdministrativeInformation, submodelsElements?: Array<TSubmodelElements>, qualifiers?: Array<IConstraint>, semanticId?: IReference, description?: Array<ILangString>, category?: string, parent?: Reference, embeddedDataSpecifications?: Array<IEmbeddedDataSpecification>, kind?: KindEnum);
    getSubmodelElements(): Array<TSubmodelElements>;
    setSemanticId(semanticId: IReference): this;
    getSubmodelIdShort(): string;
    setSubmodelElements(submodelElements: Array<TSubmodelElements>): this;
    addSubmodelElement(submodelElement: TSubmodelElements): this;
    getSubmodelElementByIdShort(idShort: string): TSubmodelElements;
    toJSON(): ISubmodel;
}
export { Submodel, TSubmodelJSON, ISubmodel };
