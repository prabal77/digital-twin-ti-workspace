"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetAdministrationShell = void 0;
const Reference_1 = require("../baseClasses/Reference");
const ConceptDictionary_1 = require("../referables/ConceptDictionary");
const View_1 = require("../referables/View");
const Identifiable_1 = require("../characteristics/Identifiable");
const ModelTypeElementsEnum_1 = require("../types/ModelTypeElementsEnum");
class AssetAdministrationShell extends Identifiable_1.Identifiable {
    constructor(identification, idShort, administration, asset, submodels, conceptDictionaries, views, derivedFrom, description, category, security, parent, embeddedDataSpecifications) {
        super(identification, idShort, { name: ModelTypeElementsEnum_1.KeyElementsEnum.AssetAdministrationShell }, administration, description, category, parent);
        this.submodels = [];
        this.views = [];
        this.embeddedDataSpecifications = [];
        this.derivedFrom = derivedFrom;
        this.security = security;
        this.submodels = submodels || [];
        this.conceptDictionaries = conceptDictionaries || [];
        this.views = views || [];
        this.embeddedDataSpecifications = embeddedDataSpecifications || [];
        if (asset) {
            this.asset = asset;
        }
        else {
            console.warn('Missing required attribute asset');
        }
    }
    static fromJSON(obj) {
        var aas = new AssetAdministrationShell(obj.identification, obj.idShort, obj.administration, obj.asset ? new Reference_1.Reference(obj.asset) : undefined, //asset
        undefined, //submodels
        undefined, //conceptDictionaries
        undefined, //views
        obj.derivedFrom ? new Reference_1.Reference(obj.derivedFrom) : undefined, //derivedFrom
        obj.description, obj.category, obj.security, //security
        obj.parent ? new Reference_1.Reference(obj.parent) : undefined, obj.embeddedDataSpecifications);
        if (obj.submodels)
            aas.setSubmodels(obj.submodels);
        if (obj.conceptDictionaries)
            aas.setConceptDictionaries(obj.conceptDictionaries);
        if (obj.views)
            aas.setViews(obj.views);
        return aas;
    }
    setSubmodels(submodels) {
        var that = this;
        this.submodels = [];
        submodels.forEach(function (submodel) {
            that.addSubmodel(submodel);
        });
        return this;
    }
    addSubmodel(submodel) {
        this.submodels.push(new Reference_1.Reference(submodel));
        return this;
    }
    setAsset(asset) {
        this.asset = new Reference_1.Reference(asset);
        return this;
    }
    setConceptDictionaries(conceptDictionaries) {
        var that = this;
        this.conceptDictionaries = [];
        conceptDictionaries.forEach(function (conceptDictionary) {
            that.addConceptDictionary(conceptDictionary);
        });
        return this;
    }
    addConceptDictionary(conceptDictionary) {
        if (!this.conceptDictionaries) {
            this.conceptDictionaries = [];
        }
        this.conceptDictionaries.push(new ConceptDictionary_1.ConceptDictionary(conceptDictionary.idShort, conceptDictionary.conceptDescriptions, conceptDictionary.description, conceptDictionary.category, conceptDictionary.parent));
        return this;
    }
    setViews(views) {
        var that = this;
        this.views = [];
        views.forEach(function (view) {
            that.addView(view);
        });
        return this;
    }
    addView(view) {
        if (!this.views) {
            this.views = [];
        }
        this.views.push(new View_1.View(view.idShort, view.containedElements, view.semanticId, view.description, view.category));
        return this;
    }
    toJSON() {
        let res = super.toJSON();
        res.derivedFrom = this.derivedFrom;
        res.security = this.security;
        res.submodels = this.submodels;
        res.conceptDictionaries = this.conceptDictionaries;
        res.views = this.views;
        res.asset = this.asset;
        res.embeddedDataSpecifications = this.embeddedDataSpecifications;
        return res;
    }
    checkRules() {
        super.checkRules();
        if (!this.asset) {
            throw new Error('Missing required attributes in AssetAdministrtionShell class');
        }
    }
}
exports.AssetAdministrationShell = AssetAdministrationShell;
//# sourceMappingURL=AssetAdministrationShell.js.map